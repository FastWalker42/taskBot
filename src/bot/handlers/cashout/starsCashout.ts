import { Context, InlineKeyboard } from 'grammy'
import { fetchUser, updateCashoutRequest } from '../../../db/methods'
import start from '../start'
import { ADMINS, IMAGES } from '../../../../CONFIG.json'
import parseCallBack from '../../utils/parseCallBack'

export default async (ctx: Context) => {
  const { id, username } = ctx.from!
  const callbackData = ctx.callbackQuery?.data!

  const { data } = parseCallBack(callbackData)

  const amountToWithdraw = Number(data)
  const user = await fetchUser({ id: id })
  const balance = user?.balance ?? 0

  const keyboard = new InlineKeyboard().text(
    '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
    'main_menu'
  )

  if (amountToWithdraw > balance) {
    return ctx.replyWithPhoto(IMAGES.TOPUP, {
      caption: `<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚≠êÔ∏è${amountToWithdraw}</b>\n–ù–∞ –±–∞–ª–∞–Ω—Å–µ: ‚≠êÔ∏è${balance}`,
      reply_markup: keyboard,
    })
  }

  await updateCashoutRequest(id, amountToWithdraw)
  await ctx.reply(`‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω –≤—ã–≤–æ–¥ ‚≠êÔ∏è${amountToWithdraw}`)

  for (const admin of ADMINS) {
    try {
      await ctx.api.sendMessage(
        admin,
        `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amountToWithdraw}‚≠ê –æ—Ç üÜî <code>${id}</code>\n@${
          username ?? '(–Ω–µ—Ç —é–∑–∞)'
        }`,
        {
          reply_markup: new InlineKeyboard()
            .text('üí∏ –°–ü–ò–°–ê–¢–¨ –° –ë–ê–õ–ê–ù–°–ê', `confirmCashout-${id}`)
            .row()
            .text('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', `cancelCashout-${id}`),
        }
      )
    } catch (error) {
      console.error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${admin}:`,
        error
      )
    }
  }

  await start(ctx)
}
