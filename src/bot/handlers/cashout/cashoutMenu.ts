import { Context, InlineKeyboard } from 'grammy'
import { IMAGES } from '../../../../CONFIG.json'
import { fetchUser } from '../../../db/methods'

export default async (ctx: Context) => {
  const user = await fetchUser({
    id: ctx.from!.id,
  })

  const frozenStarsText =
    user?.frozen_balance!.length! > 0
      ? `${user?.frozen_balance.reduce(
          (sum, item) => sum + item.amount,
          0
        )}`
      : ''

  await ctx.replyWithPhoto(IMAGES.CASHOUT, {
    caption: `‚≠êÔ∏è –í—ã–≤–æ–¥ üí∏
${
  user?.frozen_balance.length
    ? `<blockquote><b>‚ö†Ô∏è –í–ê–®–ò –ó–í–Å–ó–î–´ –ù–ê –£–î–ï–†–ñ–ê–ù–ò–ò</b></blockquote>`
    : ''
}<pre><code class="language-‚åõÔ∏è –ó–≤—ë–∑–¥—ã –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏">‚≠êÔ∏è ${frozenStarsText}</code></pre>
<pre><code class='language-üî• –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É'>‚≠êÔ∏è ${user?.balance.toFixed(
      2
    )}</code></pre>
`,
    reply_markup: new InlineKeyboard()
      .text('‚úÖ –ù–∞ –º–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç üë§', 'starsCashoutMenu')
      .row()
      /*.text(
        '‚òëÔ∏è –ù–∞ –¥—Ä—É–≥–æ–π —Å—á—ë—Ç (–≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞) üë•',
        'starsTransferInputWait'
      )
      .row()*/
      .text('–ù–∞–∑–∞–¥', 'profileInfo'),
  })
}
