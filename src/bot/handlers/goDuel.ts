import { Context, InlineKeyboard } from 'grammy'
import { IMAGES } from '../../../CONFIG.json'
import parseCallBack from '../utils/parseCallBack'
import { startDuelSearch } from '../../db/methods'
import bot from '../../bot'

export default async (ctx: Context) => {
  const amount = Number(parseCallBack(ctx.callbackQuery?.data!).data)
  if (!amount) return

  const waitingMsg = await ctx.replyWithPhoto(IMAGES.DUEL, {
    caption: `<b>üî´ –ò–©–ï–ú –°–û–ü–ï–†–ù–ò–ö–ê...</b>
<blockquote>üïí –°—Ç–∞–≤–∫–∞: <b>${amount}‚≠êÔ∏è</b>
‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...

‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
</blockquote>`,
    reply_markup: new InlineKeyboard()
      .text('‚ùå –û–¢–ú–ï–ù–ò–¢–¨ –ü–û–ò–°–ö', 'cancelDuel')
      .row()
      .text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üì≤', 'main_menu'),
  })

  try {
    const result = await startDuelSearch(
      ctx.from?.id!,
      amount,
      waitingMsg.message_id
    )

    if (result.status === 'duel_completed') {
      // –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      const winnerText = `üéâ <b>–ü–û–ë–ï–î–ê!</b>
<blockquote>–í—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ: <b>${(amount * 1.8).toFixed(
        1
      )}‚≠êÔ∏è</b></blockquote>
–°–æ–ø–µ—Ä–Ω–∏–∫ üÜî ${result.loserId} —Ç–µ—Ä—è–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É`

      const loserText = `üò¢ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>
<blockquote>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>${amount}‚≠êÔ∏è</b></blockquote>
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å üÜî ${result.winnerId} –∑–∞–±–∏—Ä–∞–µ—Ç –≤–∞—à—É —Å—Ç–∞–≤–∫—É`

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥—É—ç–ª–∏
      const sendDuelResult = async (
        chatId: number | string,
        userId: number,
        text: string,
        isWinner: boolean
      ) => {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await bot.api.deleteMessage(
            chatId,
            result.firstUserMessageId!
          )
        } catch (deleteError) {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${deleteError}`)
        }

        await bot.api.sendPhoto(chatId, IMAGES.DUEL, {
          caption: text,
          reply_markup: new InlineKeyboard()
            .text(
              `‚ôªÔ∏è –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑ (‚≠êÔ∏è${amount})`,
              `goDuel-${amount}`
            )
            .row()
            .text('ü§ë –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É', 'duel')
            .row()
            .text('üì≤ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'),
          message_effect_id: isWinner
            ? '5046509860389126442'
            : undefined,
        })
      }

      // –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isCurrentUserWinner = ctx.from?.id === result.winnerId
      await sendDuelResult(
        ctx.chat?.id!,
        ctx.from?.id!,
        isCurrentUserWinner ? winnerText : loserText,
        isCurrentUserWinner
      )

      // –î–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
      const isOpponentWinner = result.opponentId === result.winnerId
      await sendDuelResult(
        result.opponentId!,
        result.opponentId!,
        isOpponentWinner ? winnerText : loserText,
        isOpponentWinner
      )
    }
  } catch (error: any) {
    await ctx.api.editMessageCaption(
      ctx.chat?.id!,
      waitingMsg.message_id,
      {
        caption: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å: 
<blockquote>${error.message}</blockquote>`,
        reply_markup: new InlineKeyboard()
          .text('ü§ë –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É', 'duel')
          .row()
          .text('üì≤ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'),
      }
    )
  }
}
