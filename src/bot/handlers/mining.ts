import { Context, InlineKeyboard } from 'grammy'
import { fetchUser, doMining } from '../../db/methods'
import { IMAGES } from '../../../CONFIG.json'
import parseCallBack from '../utils/parseCallBack'

export default async (ctx: Context) => {
  const { id } = ctx.from!
  const { data: isClicked } = parseCallBack(ctx.callbackQuery?.data!)

  let user = await fetchUser({ id })
  let miningMessage = ''
  let minedAmount = 0

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
  const now = new Date()
  const lastMiningTime = user?.last_mining
    ? new Date(user.last_mining)
    : null
  const nextMiningTime = lastMiningTime
    ? new Date(lastMiningTime.getTime() + 3 * 60 * 60 * 1000)
    : now

  // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
  let timeLeft = '—Å–µ–π—á–∞—Å'
  let isMiningAvailable = false

  if (nextMiningTime > now) {
    const diffMs = nextMiningTime.getTime() - now.getTime()
    const diffMins = Math.ceil(diffMs / (1000 * 60))

    if (diffMins >= 60) {
      const hours = Math.floor(diffMins / 60)
      const mins = diffMins % 60
      timeLeft = `${hours}—á ${mins}–º`
    } else {
      timeLeft = `${diffMins} –º–∏–Ω—É—Ç`
    }
  } else {
    isMiningAvailable = true
  }

  // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏ –º–∞–π–Ω–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∞–π–Ω–∏–Ω–≥
  if (isClicked === 'clicked' && isMiningAvailable) {
    minedAmount = await doMining(id)

    if (minedAmount > 0) {
      miningMessage = `‚õèÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±—ã–ª–∏ ${minedAmount}‚≠ê!`
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –º–∞–π–Ω–∏–Ω–≥–∞
      user = await fetchUser({ id })
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  if (minedAmount === 0) {
    miningMessage = isMiningAvailable
      ? `üíé –ú–∞–π–Ω–∏–Ω–≥ <b>–î–û–°–¢–£–ü–ï–ù –°–ï–ô–ß–ê–°</b>! 
–ù–∞–∂–º–∏—Ç–µ "–ú–∞–π–Ω–∏—Ç—å" ‚≠êÔ∏è‚ÄºÔ∏è`
      : `‚è≥ –°–ª–µ–¥—É—é—â–∞—è –¥–æ–±—ã—á–∞ —á–µ—Ä–µ–∑ ${timeLeft}`
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ callback
  if (ctx.callbackQuery) {
    try {
      await ctx.editMessageMedia(
        {
          type: 'photo',
          media: IMAGES.MINING,
          caption: `<b>‚õèÔ∏è –ú–ê–ô–ù–ò–ù–ì</b>
<pre><code class="language-ü§ë –í–∞—à –±–∞–ª–∞–Ω—Å">${
            user?.balance.toFixed(2) ?? 0
          } ‚≠ê</code></pre>
<blockquote>${miningMessage}</blockquote>`,
          parse_mode: 'HTML',
        },
        {
          reply_markup: new InlineKeyboard()
            .text('‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å ü§©', 'mining-clicked')
            .row()
            .text('–ù–∞–∑–∞–¥ üì≤', 'main_menu'),
        }
      )
      return
    } catch (e) {
      console.error('Error editing message:', e)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ callback
  await ctx.replyWithPhoto(IMAGES.MINING, {
    caption: `<b>‚õèÔ∏è –ú–ê–ô–ù–ò–ù–ì</b>
<pre><code class="language-ü§ë –í–∞—à –±–∞–ª–∞–Ω—Å">${
      user?.balance.toFixed(2) ?? 0
    } ‚≠ê</code></pre>
<blockquote>${miningMessage}</blockquote>`,
    reply_markup: new InlineKeyboard()
      .text('‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å ü§©', 'mining-clicked')
      .row()
      .text('–ù–∞–∑–∞–¥ üì≤', 'main_menu'),
    parse_mode: 'HTML',
  })
}
