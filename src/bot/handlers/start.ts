import { Context, InlineKeyboard, Keyboard } from 'grammy'
import {
  confirmUserOp,
  fetchUser,
  getGreetText,
  getTokenByUserId,
  updateState,
} from '../../db/methods'
import { STARS_PER_REF, HOST_URL, IMAGES } from '../../../CONFIG.json'
import topupMenu from './topup/topupMenu'
import getOpList from '../utils/getOpList'
import adminMenu from './admin/adminMenu'
import parseMessageBtns from '../utils/parseMessageBtns'

export default async (ctx: Context) => {
  try {
    if (['ar', 'hi'].includes(ctx.from?.language_code!)) {
      await ctx.reply('Region not allowed')
      return
    }

    const { id } = ctx.from!
    const startPayload = ctx.message?.text?.split(' ')[1]

    let userExisted
    try {
      userExisted = await fetchUser({ id }, startPayload)
      console.log('[userExisted]', userExisted)
    } catch (err) {
      console.error('[fetchUser error]', err)
    }

    try {
      await updateState(id, 'none')
    } catch (err) {
      console.error('[updateState error]', err)
    }

    if (ctx.message?.text === '/start topup') {
      try {
        await ctx.deleteMessage()
        await topupMenu(ctx)
        return
      } catch (err) {
        console.error('[topupMenu error]', err)
      }
    }

    let opList: any[] = []
    try {
      opList = await getOpList(ctx)
      console.log('[opList]', opList)
    } catch (err) {
      console.error('[getOpList error]', err)
    }

    if (opList.length > 0 && !userExisted?.is_admin) {
      try {
        const kb = new InlineKeyboard()
        for (let i = 0; i < opList.length; i++) {
          const opChan = opList[i]
          kb.url(opChan.name ?? '–ò–º—è', opChan.url ?? 'none')
          if ((i + 1) % 3 === 0) kb.row()
        }
        kb.row().text('‚úÖ –ü–†–û–î–û–õ–ñ–ò–¢–¨', 'checkOp')

        await ctx.replyWithPhoto(IMAGES.OP, {
          caption: `
<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>
<blockquote>‚ÄºÔ∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ó–ê–ë–†–ê–¢–¨ –ü–û–î–ê–†–û–ö üéÅ –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ó–í–ï–ó–î–´ ‚≠êÔ∏è, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>"‚úÖ –ü–†–û–î–û–õ–ñ–ò–¢–¨"</b></blockquote>`,
          reply_markup: kb,
        })
      } catch (err) {
        console.error('[opList photo error]', err)
      }
    } else {
      try {
        if (opList.length === 0) {
          await confirmUserOp(id)
        }

        const userToken = await getTokenByUserId(id)

        await ctx.replyWithPhoto(IMAGES.START, {
          caption: `<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>
<blockquote>‚òÅÔ∏è –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ä—Å—ã –∑–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è!</blockquote>

<b>üîóüíï –ü—Ä–∏–≥–ª–∞—à–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ.—Å—Å—ã–ª–∫–µ</b> 
(–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
<code>t.me/Vipstars_freebot?start=${id}</code>
<blockquote><b>‚≠êÔ∏è ${STARS_PER_REF} –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!</b></blockquote>`,
          reply_markup: new InlineKeyboard()
            .text('üíé –ú–ê–ô–ù–ò–ù–ì ‚≠êÔ∏è‚õè', 'mining')
            .text('üé≤ –ö—É–±–∏–∫', 'cubeGameMenu')
            .row()
            .text('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profileInfo')
            .text('üìù –ó–∞–¥–∞–Ω–∏—è', 'getTasks')
            .row()
            .webApp(
              'üé∞ –†–£–õ–ï–¢–ö–ê –£–î–ê–ß–ò ‚òòÔ∏è‚≠êÔ∏è',
              `${HOST_URL}?botUsername=Vipstars_freebot&token=${userToken}`
            )
            .row()
            .text('üî´ –î–£–≠–õ–¨ üÜï', 'duel')
            //.row().text('üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫', 'cubeGameMenu')
            .row()
            .text('üì§ –í—ã–≤–æ–¥ üí∞', 'cashoutMenu')
            .row()
            .text('‚ùì –ü—Ä–∞–≤–∏–ª–∞', 'rules')
            .row(),
        })

        if (!userExisted?.gender) {
          await ctx.reply(
            '‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π',
            {
              reply_markup: new InlineKeyboard()
                .text('üôé‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π', 'gender-male')
                .text('üôç‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π', 'gender-female'),
            }
          )
        }

        if (
          (ctx.msg?.text && ctx.msg.text.startsWith('/start')) ||
          ctx.callbackQuery?.data === 'checkOp'
        ) {
          const greetText = await getGreetText()
          if (greetText !== 'none') {
            const { text, keyboard } = parseMessageBtns(greetText)
            await ctx.reply(text, { reply_markup: keyboard })
          }
        }
      } catch (err) {
        console.error('[main flow error]', err)
      }
    }

    if (userExisted?.is_admin) {
      try {
        await ctx.reply('‚öôÔ∏è –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞', {
          reply_markup: new Keyboard().requestChat(
            'üìåüî∞ –î–æ–±–∞–≤–∏—Ç—å –í–ï–†–ò–§ –∫–∞–Ω–∞–ª –≤ –û–ü',
            0,
            {
              chat_is_channel: true,
            }
          ),
        })
        await adminMenu(ctx)
      } catch (err) {
        console.error('[adminMenu error]', err)
      }
    }
  } catch (globalErr) {
    console.error('[UNCAUGHT ERROR IN START]', globalErr)
  }
}
