import { Context, InlineKeyboard } from 'grammy'
import parseCallBack from '../../../utils/parseCallBack'
import { getOpSourceById } from '../../../../db/methods'

export default async (ctx: Context) => {
  const id = parseCallBack(ctx.callbackQuery?.data!).data
  const opSource = await getOpSourceById(id)

  if (!opSource) {
    await ctx.reply('‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    return
  }

  await ctx.reply(
    `–°—Å—ã–ª–∫–∞ <b>${opSource.link}</b>
–†–µ–∂–∏–º –ø–æ–∫–∞–∑–∞: ${opSource.taskMode ? '–ó–∞–¥–∞–Ω–∏—è' : '–û–ü'}
–¶–µ–Ω–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ: ${opSource.taskPrice}`,
    {
      reply_markup: new InlineKeyboard()
        .text('‚ùå –£–±—Ä–∞—Ç—å –∏–∑ –û–ü', `deleteOpLink-${id}`) // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º id
        .row()
        .text('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', `toggleOpSourceMode-${opSource._id}`)
        .row()
        .text(
          '–ó–∞–¥–∞—Ç—å —Ü–µ–Ω—É',
          `setOpSourcePriceInputWait-${opSource._id}`
        )
        .row()
        .text('üîô –ù–∞–∑–∞–¥', 'adminMenu'),
    }
  )
}
