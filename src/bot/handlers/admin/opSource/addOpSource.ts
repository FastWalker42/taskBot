import { Context, InlineKeyboard } from 'grammy'
import { addOpSource, fetchUser } from '../../../../db/methods'
import adminMenu from '../adminMenu'
import parseCallBack from '../../../utils/parseCallBack'

export default async (ctx: Context) => {
  const text = ctx.message?.text ?? 'none'
  const userId = ctx.from?.id

  if (!userId) {
    await ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')
    return
  }

  const isValidLink =
    text.startsWith('https://t.me') ||
    text.startsWith('http://t.me') ||
    text.startsWith('t.me/')

  if (!isValidLink) {
    await ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞', {
      reply_markup: new InlineKeyboard().text(
        '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        'main_menu'
      ),
    })
    return
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const user = await fetchUser({ id: userId })
    if (!user?.state) {
      await ctx.reply('–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      return
    }

    // –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const stateData = parseCallBack(user.state).data // 'op' –∏–ª–∏ 'tasks'

    if (stateData === 'tasks') {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ
      await addOpSource(text, true)
      await ctx.reply(`üîó‚úÖ –°—Å—ã–ª–∫–∞ ${text} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ!`)
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –û–ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      await addOpSource(text, false)
      await ctx.reply(`üîó‚úÖ –°—Å—ã–ª–∫–∞ ${text} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –û–ü!`)
    }

    await adminMenu(ctx)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', error)
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏')
  }
}
