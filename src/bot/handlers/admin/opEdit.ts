import { Context, InlineKeyboard } from 'grammy'
import {
  getAllOpSources,
  getAllOpChannels,
} from '../../../db/methods'

export default async (ctx: Context) => {
  const opChannels = await getAllOpChannels()
  const opSources = await getAllOpSources()

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–µ
  const buttons: { text: string; callback_data: string }[] = []

  for (let i = 0; i < opChannels.length; i++) {
    const channel = opChannels[i]
    try {
      const chatData = await ctx.api.getChat(channel.id)
      const name = chatData.title ?? `–ö–∞–Ω–∞–ª (${i + 1})`
      buttons.push({
        text: name,
        callback_data: `editChan-${channel.id}`,
      })
    } catch {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  }

  for (let i = 0; i < opSources.length; i++) {
    const opSource = opSources[i]
    const name = `–°—Å—ã–ª–∫–∞ ${i + 1}`
    buttons.push({
      text: name,
      callback_data: `editOpSource-${opSource._id}`, // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º id
    })
  }

  const kb = new InlineKeyboard()

  buttons.forEach((btn, idx) => {
    kb.text(btn.text, btn.callback_data)
    if ((idx + 1) % 2 === 0) {
      kb.row()
    }
  })

  if (buttons.length % 2 !== 0) {
    kb.row()
  }

  kb.text('üîô –ù–∞–∑–∞–¥', 'adminMenu')

  await ctx.reply('<b>üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–ü</b>', {
    reply_markup: kb,
  })
}
