import { Context, InlineKeyboard } from 'grammy'
import { findUserById } from '../../../db/methods'

export default async (ctx: Context) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback –¥–∞–Ω–Ω—ã—Ö
    let targetId: number | null = null

    if (ctx.message?.text) {
      const text = ctx.message.text.trim()
      if (/^\d+$/.test(text)) {
        targetId = parseInt(text, 10)
      }
    } else if (ctx.callbackQuery?.data) {
      const data = ctx.callbackQuery.data
      const match = data.match(/\d+/)
      if (match) {
        targetId = parseInt(match[0], 10)
      }
    }

    if (!targetId || isNaN(targetId)) {
      throw new Error('Invalid ID')
    }

    console.log('Fetching user with ID:', targetId)

    const userData = await findUserById(targetId)
    if (!userData) {
      throw new Error('User not found')
    }

    const kb = new InlineKeyboard()
    if (userData.cashout_request) {
      kb.text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥', `confirmCashout-${targetId}`).row()
      kb.text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥', `cancelCashout-${targetId}`).row()
    }

    kb.text('üîô –ù–∞–∑–∞–¥', 'adminMenu')

    await ctx.reply(
      `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
<code>üÜî ${targetId}</code>
<blockquote>${
        userData.is_premium ? 'üü™ –ï–°–¢–¨ –ü–†–ï–ú–ò–£–ú' : '‚¨õÔ∏è –ù–µ—Ç –ø—Ä–µ–º–∏—É–º–∞'
      }</blockquote>

<pre><code class="language-üåê –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è">${
        userData.invited_by ? userData.invited_by : '‚úñÔ∏è –ù–µ—Ç'
      }</code></pre>

<blockquote>${
        userData.activated ? '‚úÖ –ü—Ä–æ—à—ë–ª –û–ü—à–∫—É' : '‚ùå –ù–µ –ø—Ä–æ—à—ë–ª –û–ü—à–∫—É'
      }</blockquote>
<pre><code class="language-üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å">${
        userData.last_activity
      }</code></pre>
<pre><code class="language-üìù –ó–∞–¥–∞–Ω–∏–π —Å–¥–µ–ª–∞–Ω–æ">${
        userData.tasks_done
      }</code></pre>

<pre><code class="language-üí∞ –ë–∞–ª–∞–Ω—Å">${userData.balance}</code></pre>
<pre><code class="language-ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤">${
        userData.referals
      }</code></pre>
<pre><code class="language-üï∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏">${
        userData.createdAt
      }</code></pre>
<pre><code class="language-üòç –ü–æ–ª"> ${
        userData.gender
          ? userData.gender === 'male'
            ? 'üü¶ –ú–£–ñ–°–ö–û–ô'
            : 'üü™ –ñ–ï–ù–°–ö–ò–ô'
          : '‚¨õÔ∏è –ù–ï –£–ö–ê–ó–ê–ù'
      }</code></pre>

${
  userData.cashout_request
    ? `<b>–ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î:</b>
<pre><code class="language-–°—É–º–º–∞">${userData.cashout_request.amount}</code></pre>
<pre><code class="language-–î–∞—Ç–∞">${userData.cashout_request?.date}</code></pre>`
    : '<b>–ó–ê–ü–†–û–°–ê –ù–ê –í–´–í–û–î –ù–ï–¢</b>'
}
`,
      { reply_markup: kb }
    )
  } catch (error) {
    console.error('Error in user info handler:', error)
    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π üÜî, –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ', {
      reply_markup: new InlineKeyboard().text(
        'üîô –ù–∞–∑–∞–¥',
        'adminMenu'
      ),
    })
  }
}
