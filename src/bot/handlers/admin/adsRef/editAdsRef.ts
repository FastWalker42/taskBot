import { Context, InlineKeyboard } from 'grammy'
import parseCallBack from '../../../utils/parseCallBack'
import {
  getAllAdsRefs,
  countActivatedUsersByAdRef,
} from '../../../../db/methods'

export default async (ctx: Context) => {
  const adsRefs = await getAllAdsRefs()
  const adsRefPayload = parseCallBack(ctx.callbackQuery?.data!).data

  const foundAdRef = adsRefs.find(
    (ref) => ref.payload === adsRefPayload
  )

  if (!foundAdRef) return

  const link = `<code>t.me/Vipstars_freebot?start=${adsRefPayload}</code>`

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  const activatedUsers = await countActivatedUsersByAdRef(
    foundAdRef.payload
  )

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
  let visitsInfo = ''

  if (foundAdRef.showOnlyUnique) {
    visitsInfo = `üëÅ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${foundAdRef.unique_visits}`
  } else {
    visitsInfo = `üëÅ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${foundAdRef.visits}
üîÆ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${foundAdRef.unique_visits}
üéØ –ü—Ä–æ—à–ª–æ –û–ü—à–∫—É: ${activatedUsers}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
  const toggleLabel = foundAdRef.showOnlyUnique
    ? 'üé≠ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)'
    : 'üé≠ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥ (–≤—Å–µ)'

  // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await ctx.reply(
    `–°—Å—ã–ª–∫–∞ ¬´${foundAdRef.name}¬ª\n${link}\n\n${visitsInfo}`,
    {
      reply_markup: new InlineKeyboard()
        .text(
          '‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É',
          `deleteAdsRef-${foundAdRef.payload}`
        )
        .row()
        .text(toggleLabel, `adsRefOnlyUnique-${foundAdRef.payload}`)
        .row()
        .text('üîô –ù–∞–∑–∞–¥', 'adminMenu'),
    }
  )
}
