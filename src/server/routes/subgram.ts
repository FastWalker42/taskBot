import { Router } from 'express'
import { SubgramNotify } from '../types'
import { addFrozenBalance, incrementTaskDone } from '../../db/methods'
import CONFIG from '../../../CONFIG.json'
import bot from '../../bot'
import { asyncHandler } from '../asyncHandler'
import { STARS_PER_TASK } from '../../../CONFIG.json'

const router = Router()

router.post(
  '/subgram',
  asyncHandler(async (req, res) => {
    console.log('======= INCOMING REQUEST =======')
    console.log('Headers:', req.headers)
    console.log('Method:', req.method)
    console.log('URL:', req.url)
    console.log('Query params:', req.query)
    console.log('Body:', req.body)
    console.log('================================')

    res.sendStatus(200)
    try {
      const subgramData: SubgramNotify = req.body
      for (const webhook of subgramData.webhooks) {
        try {
          let msgText
          if (webhook.status === 'unsubscribed') {
            await addFrozenBalance(webhook.user_id, -STARS_PER_TASK)
            msgText = `‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞ ${webhook.link}
üòî –ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –∑–≤—ë–∑–¥—ã –Ω–∞–∑–∞–¥.`
          } else if (webhook.status === 'subscribed') {
            await incrementTaskDone(webhook.user_id)
            await addFrozenBalance(webhook.user_id, STARS_PER_TASK)
            msgText = `‚≠êÔ∏è‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É ${webhook.link}
ü§ë –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!
<blockquote>–Ω–∞ —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${STARS_PER_TASK}‚≠êÔ∏è</blockquote>`
          } else {
            msgText = `‚≠êÔ∏èüòÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞, –≤—ã —É–∂–µ –±—ã–ª–∏ –≤ –∫–∞–Ω–∞–ª–µ ${webhook.link}`
          }
          try {
            await bot.api.sendMessage(webhook.user_id, msgText)
          } catch {}
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error)
        }
      }
    } catch {}
  })
)

export default router
