import CONFIG from './CONFIG.json'
import { Bot, GrammyError, InlineKeyboard } from 'grammy'
import { parseMode } from '@grammyjs/parse-mode'
import * as fs from 'fs'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(CONFIG.BOT_TOKEN_PROD)
bot.api.config.use(parseMode('HTML'))

// –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
const file = fs.readFileSync('./ids.txt', 'utf-8')
const ids = file
  .split(/\s+/)
  .filter(Boolean)
  .map((id) => Number(id))

console.log(`Total IDs: ${ids.length}`)

const CAPTION = `<b>‚ù§Ô∏è –Ø–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –¥–æ 400‚ÇΩ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ö–ê–ñ–î–û–ú–£</b>, –∫—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –µ–≥–æ –ø–æ–∏—Å–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

<b>–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å:</b>
1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º <a href="https://cpa.socialjet.link/FYkaQM">–ø–æ —Å—Å—ã–ª–∫–µ</a> –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ø–Ω–¥–µ–∫—Å –∫–∞–∫ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É <b>+200‚ÇΩ</b>, –µ—Å–ª–∏ —É –≤–∞—Å Android –∏ <b>+300‚ÇΩ</b>, –µ—Å–ª–∏ —É –≤–∞—Å iPhone;
2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href="https://cpa.socialjet.link/niSOEa">–Ø–Ω–¥–µ–∫—Å —Å –ê–ª–∏—Å–æ–π</a> <b>+100‚ÇΩ</b>. <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å,</b> –∫–æ–ø–∏—Ä—É–µ–º <a href="https://cpa.socialjet.link/niSOEa">—Å—Å—ã–ª–∫—É</a> –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Å–≤–æ–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.
<b>3. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Å—É–º–º–µ –¥–æ 400‚ÇΩ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø–æ–¥–∞—Ä–æ–∫!</b>
<blockquote>*–ü—Ä–∏ <a href="https://yandex.ru/project/ios/default_legal/legal_balance_300">–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏</a> <a href="https://yandex.ru/project/searchapp/pp_promocodnica_landingi/100r_landing_yandexsearchapp-sj/rules?click_id=687669fdcda89e0001be735e">–≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π </a></blockquote>`

const CHUNK_SIZE = 15 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const BOT_ADMIN_ID = 6273715396 // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

const successfulIds: number[] = [] // –º–∞—Å—Å–∏–≤ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

function chunk<T>(arr: T[], size: number): T[][] {
  const res = []
  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size))
  }
  return res
}

async function sendChunk(chunk: number[]) {
  try {
    const results = await Promise.allSettled(
      chunk.map((id) =>
        bot.api.sendPhoto(id, 'https://i.ibb.co/pj03Xk45/image.png', {
          caption: CAPTION,
        })
      )
    )

    results.forEach((result, i) => {
      const id = chunk[i]
      if (result.status === 'fulfilled') {
        console.log(`‚úÖ Sent to ${id}`)
        successfulIds.push(id) // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
      } else {
        console.error(
          `‚ùå Failed for ${id}:`,
          (result.reason as any)?.message
        )
      }
    })

    return results.filter((r) => r.status === 'fulfilled').length
  } catch (error) {
    console.error('Error in sendChunk:', error)
    return 0
  }
}

async function sendAdminMessage(message: string) {
  try {
    await bot.api.sendMessage(BOT_ADMIN_ID, message)
  } catch (error) {
    console.error('Failed to send admin message:', error)
  }
}

async function sendMessages() {
  let success = 0
  const chunks = chunk(ids, CHUNK_SIZE)

  for (const c of chunks) {
    try {
      const count = await sendChunk(c)
      success += count
      console.log(`‚úÖ Chunk done. Total success: ${success}`)
      await sendAdminMessage(
        `‚úÖ Chunk done. Total success: ${success}`
      )
    } catch (error) {
      if (
        error instanceof Error &&
        error.message.includes('Too Many Requests')
      ) {
        const retryAfter =
          (error as GrammyError).parameters?.retry_after || 100
        const waitTime = retryAfter + 100

        console.log(
          `‚è≥ Rate limit hit. Waiting for ${
            waitTime / 1000
          } seconds...`
        )
        await new Promise((resolve) => setTimeout(resolve, waitTime))

        try {
          const count = await sendChunk(c)
          success += count
          console.log(
            `‚úÖ Chunk done after retry. Total success: ${success}`
          )
          await sendAdminMessage(
            `‚úÖ Chunk done after retry. Total success: ${success}`
          )
        } catch (retryError) {
          console.error('Retry failed:', retryError)
        }
      } else {
        console.error('Unexpected error:', error)
      }
    }

    await new Promise((resolve) => setTimeout(resolve, 1000))
  }

  console.log(`‚úÖ Done. Total successful sends: ${success}`)
  await sendAdminMessage(
    `‚úÖ Done. Total successful sends: ${success}`
  )

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞—á–Ω—ã–µ ID –≤ —Ñ–∞–π–ª
  fs.writeFileSync(
    './successful_ids.txt',
    successfulIds.join('\n'),
    'utf-8'
  )
  console.log(
    `üíæ Saved ${successfulIds.length} successful IDs to successful_ids.txt`
  )
}

sendMessages()
