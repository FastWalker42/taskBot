import CONFIG from './CONFIG.json'
import { Bot, GrammyError, InlineKeyboard } from 'grammy'
import { parseMode } from '@grammyjs/parse-mode'
import * as fs from 'fs'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(CONFIG.BOT_TOKEN_PROD)
bot.api.config.use(parseMode('HTML'))

// –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
const file = fs.readFileSync('./ids2.txt', 'utf-8')
const ids = file
  .split(/\s+/)
  .filter(Boolean)
  .map((id) => Number(id))

console.log(`Total IDs: ${ids.length}`)

const CAPTION = `<b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç 1XBET! </b>

üíµ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞, –ø–æ–ø–æ–ª–Ω—è–π —Å—á—ë—Ç –∏ –ø–æ–ª—É—á–∞–π —Å–≤–æ–∏ <b>$800</b> –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –±—É–∫–º–µ–∫–µ—Ä–∞ <b>1XBET</b>. 

üí∞ –ü—Ä–æ–º–æ–∫–æ–¥: <b>freebot</b>

üëâ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://bit.ly/4553Gaa

‚úÖ –ü–æ–ø–æ–ª–Ω—è–µ—à—å —Å—á—ë—Ç, –∏ –∑–∞–±–∏—Ä–∞–µ—à—å <b>$800</b>

<b>üáµüáπü§© "–ë–µ–Ω—Ñ–∏–∫–∞" –Ω–∞ –ø–æ—Ä–æ–≥–µ –Ω–æ–≤–æ–π –ø–æ–±–µ–¥—ã?</b>

–ù–∞ –≤—ã–µ–∑–¥–µ "–æ—Ä–ª—ã" —Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å "–ù–∏—Ü—Ü–µ–π", –∏ —Ç–µ–ø–µ—Ä—å –∂–¥—É—Ç –≥–æ—Å—Ç–µ–π –≤ –õ–∏—Å—Å–∞–±–æ–Ω–µ. –ü–æ–ª—É—á–∏—Ç—Å—è –ª–∏ —É —Ñ—Ä–∞–Ω—Ü—É–∑–æ–≤ —Å–æ—Ç–≤–æ—Ä–∏—Ç—å —á—É–¥–æ –∏–ª–∏ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Ü—ã —Å–Ω–æ–≤–∞ —É—Å—Ç—Ä–æ—è—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è —Å–≤–æ–∏—Ö —Ñ–∞–Ω–∞—Ç–æ–≤?

<b>–°–¥–µ–ª–∞–π —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –±–æ—Ä—å–±—ã –∑–∞ –õ–∏–≥—É —á–µ–º–ø–∏–æ–Ω–æ–≤ —Å 1xBet!</b>`

const CHUNK_SIZE = 15 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const BOT_ADMIN_ID = 6273715396 // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

const successfulIds: number[] = [] // –º–∞—Å—Å–∏–≤ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

function chunk<T>(arr: T[], size: number): T[][] {
  const res = []
  for (let i = 0; i < arr.length; i += size) {
    res.push(arr.slice(i, i + size))
  }
  return res
}

async function sendChunk(chunk: number[]) {
  try {
    const results = await Promise.allSettled(
      chunk.map((id) =>
        bot.api.sendPhoto(id, 'https://i.ibb.co/20T0cvLb/image.png', {
          caption: CAPTION,
        })
      )
    )

    results.forEach((result, i) => {
      const id = chunk[i]
      if (result.status === 'fulfilled') {
        console.log(`‚úÖ Sent to ${id}`)
        successfulIds.push(id) // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
      } else {
        console.error(
          `‚ùå Failed for ${id}:`,
          (result.reason as any)?.message
        )
      }
    })

    return results.filter((r) => r.status === 'fulfilled').length
  } catch (error) {
    console.error('Error in sendChunk:', error)
    return 0
  }
}

async function sendAdminMessage(message: string) {
  try {
    await bot.api.sendMessage(BOT_ADMIN_ID, message)
  } catch (error) {
    console.error('Failed to send admin message:', error)
  }
}

async function sendMessages() {
  let success = 0
  const chunks = chunk(ids, CHUNK_SIZE)

  for (const c of chunks) {
    try {
      const count = await sendChunk(c)
      success += count
      console.log(`‚úÖ Chunk done. Total success: ${success}`)
      await sendAdminMessage(
        `‚úÖ Chunk done. Total success: ${success}`
      )
    } catch (error) {
      if (
        error instanceof Error &&
        error.message.includes('Too Many Requests')
      ) {
        const retryAfter =
          (error as GrammyError).parameters?.retry_after || 100
        const waitTime = retryAfter + 100

        console.log(
          `‚è≥ Rate limit hit. Waiting for ${
            waitTime / 1000
          } seconds...`
        )
        await new Promise((resolve) => setTimeout(resolve, waitTime))

        try {
          const count = await sendChunk(c)
          success += count
          console.log(
            `‚úÖ Chunk done after retry. Total success: ${success}`
          )
          await sendAdminMessage(
            `‚úÖ Chunk done after retry. Total success: ${success}`
          )
        } catch (retryError) {
          console.error('Retry failed:', retryError)
        }
      } else {
        console.error('Unexpected error:', error)
      }
    }

    await new Promise((resolve) => setTimeout(resolve, 1000))
  }

  console.log(`‚úÖ Done. Total successful sends: ${success}`)
  await sendAdminMessage(
    `‚úÖ Done. Total successful sends: ${success}`
  )

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞—á–Ω—ã–µ ID –≤ —Ñ–∞–π–ª
  fs.writeFileSync(
    './successful_ids.txt',
    successfulIds.join('\n'),
    'utf-8'
  )
  console.log(
    `üíæ Saved ${successfulIds.length} successful IDs to successful_ids.txt`
  )
}

setTimeout(() => {
  sendMessages().catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –≤ sendMessages:', err)
    sendAdminMessage(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`).catch(console.error)
  })
}, 2 * 60 * 60 * 1000)
